---
- name: Recopilar facts
  hosts: all
  vars:
    awx_url: "{{ lookup('env', 'AWX_API_URL') }}"
    awx_token: "{{ lookup('env', 'AWX_OAUTH_TOKEN') }}"
    # Definición de base para configuración SSH
    base_ssh_args: >-
      -o StrictHostKeyChecking=no 
      -o UserKnownHostsFile=/dev/null
    # Configuración para hosts antiguos/obsoletos
    legacy_ssh_args: >-
      {{ base_ssh_args }}
      -o KexAlgorithms=+diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1
      -o Ciphers=+aes128-cbc,3des-cbc,aes192-cbc,aes256-cbc
      -o HostKeyAlgorithms=+ssh-rsa,ssh-dss
      -o PubkeyAcceptedKeyTypes=+ssh-rsa,ssh-dss
      -o MACs=+hmac-sha1,hmac-md5,hmac-md5-96,hmac-sha1-96

  # Configuraciones específicas para diferentes tipos de hosts
  pre_tasks:
    - name: Configurar parámetros SSH según el grupo
      set_fact:
        ansible_ssh_transfer_method: piped
        ansible_ssh_common_args: "{{ legacy_ssh_args if 'hosts_obsoletos' in group_names or 'ssh_rsa_hosts' in group_names else base_ssh_args }}"
        ansible_connection: "{{ 'paramiko' if 'hosts_obsoletos' in group_names else 'ssh' }}"
        ansible_paramiko_cipher: "aes128-cbc,3des-cbc" # Para hosts obsoletos que necesitan cifrados antiguos

    - name: Verificar conexión
      ping:
      register: ping_result
      ignore_errors: yes

    - name: Cambiar a método alternativo si la conexión falla
      set_fact:
        ansible_connection: "paramiko"
        ansible_ssh_common_args: "{{ base_ssh_args }}"
      when: ping_result is failed
      
    - name: Reintentar conexión con parámetros alternativos
      ping:
      register: second_ping
      ignore_errors: yes
      when: ping_result is failed
      
    - name: Mostrar mensaje de error si ambos métodos fallan
      fail:
        msg: "No se pudo conectar al host {{ inventory_hostname }} con ningún método"
      when: ping_result is failed and second_ping is defined and second_ping is failed
  
  tasks:
    - name: Recopilar facts estándar del sistema
      setup:
        gather_subset:
          - hardware
          - network
          - virtual
          - distribution
      register: setup_result
      ignore_errors: yes

    - name: Registrar fallo de recopilación de facts
      set_fact:
        facts_collection_failed: true
      when: setup_result is failed

    # Continuar solo si la recolección de facts fue exitosa
    - name: Recopilar información de paquetes instalados
      package_facts:
        manager: auto
      when: not facts_collection_failed | default(false)
      ignore_errors: yes

    - name: Extraer versiones de Python instaladas sin json_query
      set_fact:
        python_versions_detected: "{{ python_versions_list | default([]) }}"
      vars:
        python_packages: "{{ ansible_facts.packages | dict2items | selectattr('key', 'match', '^python[0-9.]*$') | list }}"
        python_versions_list: >-
          {% set result = [] %}
          {% for pkg in python_packages %}
            {% for item in pkg.value %}
              {% set _ = result.append({'name': pkg.key, 'version': item.version}) %}
            {% endfor %}
          {% endfor %}
          {{ result }}
      when: not facts_collection_failed | default(false) and ansible_facts.packages is defined

    - name: Extraer versiones de Java instaladas sin json_query
      set_fact:
        java_versions_detected: "{{ java_versions_list | default([]) }}"
      vars:
        java_packages: "{{ ansible_facts.packages | dict2items | selectattr('key', 'search', 'openjdk|java') | list }}"
        java_versions_list: >-
          {% set result = [] %}
          {% for pkg in java_packages %}
            {% for item in pkg.value %}
              {% set _ = result.append({'name': pkg.key, 'version': item.version}) %}
            {% endfor %}
          {% endfor %}
          {{ result }}
      when: not facts_collection_failed | default(false) and ansible_facts.packages is defined

    - name: Extraer versiones de Tomcat instaladas sin json_query
      set_fact:
        tomcat_versions_detected: "{{ tomcat_versions_list | default([]) }}"
      vars:
        tomcat_packages: "{{ ansible_facts.packages | dict2items | selectattr('key', 'search', 'tomcat') | list }}"
        tomcat_versions_list: >-
          {% set result = [] %}
          {% for pkg in tomcat_packages %}
            {% for item in pkg.value %}
              {% set _ = result.append({'name': pkg.key, 'version': item.version}) %}
            {% endfor %}
          {% endfor %}
          {{ result }}
      when: not facts_collection_failed | default(false) and ansible_facts.packages is defined

    - name: Construir diccionario con facts filtrados
      set_fact:
        filtered_system_facts:
          hostname: "{{ ansible_hostname | default(inventory_hostname) }}"
          fqdn: "{{ ansible_fqdn | default('') }}"
          ip: "{{ ansible_default_ipv4.address | default('') }}"
          os:
            name: "{{ ansible_distribution | default('Unknown') }}"
            version: "{{ ansible_distribution_version | default('Unknown') }}"
            release: "{{ ansible_distribution_release | default('') }}"
          kernel: "{{ ansible_kernel | default('Unknown') }}"
          architecture: "{{ ansible_architecture | default('Unknown') }}"
          memory_mb: "{{ ansible_memtotal_mb | default(0) }}"
          cpu_count: "{{ ansible_processor_count | default(0) }}"
          python_versions: "{{ python_versions_detected | default([]) }}"
          java_versions: "{{ java_versions_detected | default([]) }}"
          tomcat_versions: "{{ tomcat_versions_detected | default([]) }}"
          collected_at: "{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S') }}"
          collection_status: "{{ 'failed' if facts_collection_failed | default(false) else 'success' }}"
      when: not facts_collection_failed | default(false)

    - name: Construir diccionario mínimo para hosts con error
      set_fact:
        filtered_system_facts:
          hostname: "{{ inventory_hostname }}"
          collected_at: "{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S') }}"
          collection_status: "failed"
          error_message: "{{ setup_result.msg | default('Error de conexión libcrypto') }}"
      when: facts_collection_failed | default(false)
          
    - name: Actualizar host en AWX con facts filtrados
      awx.awx.host:
        controller_host: "{{ awx_url }}"
        controller_oauthtoken: "{{ awx_token }}"
        inventory: "{{ awx_inventory_id }}"
        name: "{{ inventory_hostname }}"
        new_name: "{{ ansible_hostname | default(inventory_hostname) }}"
        validate_certs: false
        variables:
          original_name: "{{ original_name | default(inventory_hostname) }}"
          name: "{{ name | default(inventory_hostname) }}"
          hostname: "{{ hostname | default(inventory_hostname) }}"
          ansible_host: "{{ ansible_host | default(inventory_hostname) }}"
          proxmox_agent: "{{ proxmox_agent | default('') }}"
          proxmox_agent_interfaces: "{{ proxmox_agent_interfaces | default('') }}"
          proxmox_boot: "{{ proxmox_boot | default('') }}"
          proxmox_cores: "{{ proxmox_cores | default('') }}"
          proxmox_cpu: "{{ proxmox_cpu | default('') }}"
          proxmox_digest: "{{ proxmox_digest | default('') }}"
          proxmox_hotplug: "{{ proxmox_hotplug | default('') }}"
          proxmox_ide0: "{{ proxmox_ide0 | default('') }}"
          proxmox_memory: "{{ proxmox_memory | default('') }}"
          proxmox_meta: "{{ proxmox_meta | default('') }}"
          proxmox_net0: "{{ proxmox_net0 | default('') }}"
          proxmox_node: "{{ proxmox_node | default('') }}"
          proxmox_numa: "{{ proxmox_numa | default('') }}"
          proxmox_ostype: "{{ proxmox_ostype | default('') }}"
          proxmox_qmpstatus: "{{ proxmox_qmpstatus | default('')}}"
          proxmox_scsi0: "{{ proxmox_scsi0 | default('') }}"
          proxmox_scsi1: "{{ proxmox_scsi1 | default('') }}"
          proxmox_scsi2: "{{ proxmox_scsi2 | default('') }}"
          proxmox_scsi3: "{{ proxmox_scsi3 | default('') }}"
          proxmox_scsihw: "{{ proxmox_scsihw | default('') }}"
          proxmox_snapshots: "{{ proxmox_snapshots | default('') }}"
          proxmox_sockets: "{{ proxmox_sockets | default('') }}"
          proxmox_status: "{{ proxmox_status | default('') }}"
          proxmox_vmgenid: "{{ proxmox_vmgenid | default('') }}"
          proxmox_vmid: "{{ proxmox_vmid | default('') }}"
          proxmox_vmtype: "{{ proxmox_vmtype | default('') }}"
          ansible_facts: "{{ filtered_system_facts }}"
      delegate_to: localhost
      throttle: 1
