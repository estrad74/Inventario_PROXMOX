---
- name: Recopilar facts básicos con módulo setup
  hosts: all
  gather_facts: no
  vars:
    awx_url: "{{ lookup('env', 'AWX_API_URL') }}"
    awx_token: "{{ lookup('env', 'AWX_OAUTH_TOKEN') }}"
    kerberos_user: "{{ lookup('env', 'KRB5_PRINCIPAL') }}"
    kerberos_password: "{{ lookup('env', 'KRB5_PASSWORD') }}"
      
  tasks:

    - name: Mostrar variables Kerberos
      debug:
        msg: |
          User: {{ kerberos_user }}
          Password: {{ kerberos_password }}
      delegate_to: localhost
      run_once: true

    - name: Obtener ticket Kerberos
      expect:
        command: kinit {{ kerberos_user }}
        responses:
          "Password for": "{{ kerberos_password }}"
        timeout: 30
      delegate_to: localhost
      run_once: true
      register: kinit_result
      ignore_errors: true
      
    - name: Mostrar resultado de kinit
      debug:
        msg: |
          Return code: {{ kinit_result.rc }}
          Stdout: {{ kinit_result.stdout }}
          Stderr: {{ kinit_result.stderr }}
      delegate_to: localhost
      run_once: true
        
    - name: Verificar ticket obtenido
      shell: klist
      delegate_to: localhost
      run_once: true
      register: klist_result
  
    - name: Mostrar tickets disponibles
      debug:
        msg: "{{ klist_result.stdout }}"
      delegate_to: localhost
      run_once: true

    - name: Verificar tickets Kerberos
      shell: |
        echo "=== KLIST ==="
        klist 2>/dev/null || echo "No hay tickets Kerberos"
        echo "=== WHOAMI ==="
        whoami
        echo "=== KRB5 CONFIG ==="
        cat /etc/krb5.conf | grep -A5 -B5 CED || echo "No se encuentra CED en krb5.conf"
      register: kerberos_debug
      delegate_to: localhost
      run_once: true

    - name: Mostrar info Kerberos
      debug:
        msg: "{{ kerberos_debug.stdout }}"
      delegate_to: localhost
      run_once: true

    - name: Comprobar conexión con los hosts
      ansible.windows.win_ping:
      ignore_unreachable: true
      
    - name: Recopilar facts estándar
      setup:
        gather_subset:
          - hardware
          - network
          - virtual
          - distribution

    - name: Obtener versiones de Python instaladas (Windows)
      win_shell: |
        try {
            $version = & python --version 2>&1
            if ($version -match "Python (\d+\.\d+\.\d+)") {
                @{ name = "Python"; version = $matches[1] } | ConvertTo-Json
            } else { "[]" }
        } catch { "[]" }
      register: python_versions_raw
      when: ansible_os_family == "Windows"
      ignore_errors: yes

    - name: Obtener versiones de Java instaladas (Windows)
      win_shell: |
        try {
            $version = & java -version 2>&1
            if ($version -match 'version "([^"]+)"') {
                @{ name = "Java"; version = $matches[1] } | ConvertTo-Json
            } else { "[]" }
        } catch { "[]" }
      register: java_versions_raw
      when: ansible_os_family == "Windows"
      ignore_errors: yes

    - name: Obtener servicios de Tomcat (Windows)
      win_shell: |
        $tomcatServices = Get-Service | Where-Object { $_.Name -like "*tomcat*" }
        if ($tomcatServices) {
            $tomcatServices | ForEach-Object { 
                @{ name = $_.DisplayName; status = $_.Status.ToString() }
            } | ConvertTo-Json
        } else { "[]" }
      register: tomcat_versions_raw
      when: ansible_os_family == "Windows"
      ignore_errors: yes

    - name: Procesar versiones detectadas
      set_fact:
        python_versions_detected: "{{ [python_versions_raw.stdout | from_json] if python_versions_raw.stdout is defined and python_versions_raw.stdout != '[]' else [] }}"
        java_versions_detected: "{{ [java_versions_raw.stdout | from_json] if java_versions_raw.stdout is defined and java_versions_raw.stdout != '[]' else [] }}"
        tomcat_versions_detected: "{{ tomcat_versions_raw.stdout | from_json if tomcat_versions_raw.stdout is defined and tomcat_versions_raw.stdout != '[]' else [] }}"
      when: ansible_os_family == "Windows"

    - name: Inicializar variables por defecto para sistemas no-Windows
      set_fact:
        python_versions_detected: []
        java_versions_detected: []
        tomcat_versions_detected: []
      when: ansible_os_family != "Windows"

    - name: Obtener timestamp actual
      set_fact:
        current_timestamp: "{{ ansible_date_time.iso8601 }}"

    - name: Construir diccionario con los facts
      set_fact:
        filtered_system_facts:
          hostname: "{{ ansible_hostname }}"
          fqdn: "{{ ansible_fqdn | default('') }}"
          ip: "{{ ansible_default_ipv4.address | default('') }}"
          os:
            name: "{{ ansible_distribution }}"
            version: "{{ ansible_distribution_version }}"
            release: "{{ ansible_distribution_release | default('') }}"
            family: "{{ ansible_os_family }}"
          kernel: "{{ ansible_kernel }}"
          architecture: "{{ ansible_architecture }}"
          memory_mb: "{{ ansible_memtotal_mb }}"
          cpu_count: "{{ ansible_processor_count }}"
          python_versions: "{{ python_versions_detected }}"
          java_versions: "{{ java_versions_detected }}"
          tomcat_services: "{{ tomcat_versions_detected }}"
          collected_at: "{{ current_timestamp }}"
          
    - name: Actualizar host en AWX añadiendo los facts
      awx.awx.host:
        controller_host: "{{ awx_url }}"
        controller_oauthtoken: "{{ awx_token }}"
        inventory: "{{ inventario_destino }}"
        name: "{{ inventory_hostname }}"
        new_name: "{{ original_name | default(inventory_hostname) }}"
        validate_certs: false
        variables:
          original_name: "{{ original_name | default(inventory_hostname) }}"
          name: "{{ name | default(inventory_hostname) }}"
          hostname: "{{ hostname | default(ansible_hostname) }}"
          ansible_host: "{{ ansible_host | default(ansible_default_ipv4.address) }}"
          proxmox_agent: "{{ proxmox_agent | default('') }}"
          proxmox_agent_interfaces: "{{ proxmox_agent_interfaces | default('') }}"
          proxmox_boot: "{{ proxmox_boot | default('') }}"
          proxmox_cores: "{{ proxmox_cores | default('') }}"
          proxmox_cpu: "{{ proxmox_cpu | default('') }}"
          proxmox_digest: "{{ proxmox_digest | default('') }}"
          proxmox_hotplug: "{{ proxmox_hotplug | default('') }}"
          proxmox_ide0: "{{ proxmox_ide0 | default('') }}"
          proxmox_memory: "{{ proxmox_memory | default('') }}"
          proxmox_meta: "{{ proxmox_meta | default('') }}"
          proxmox_net0: "{{ proxmox_net0 | default('') }}"
          proxmox_node: "{{ proxmox_node | default('') }}"
          proxmox_numa: "{{ proxmox_numa | default('') }}"
          proxmox_ostype: "{{ proxmox_ostype | default('') }}"
          proxmox_qmpstatus: "{{ proxmox_qmpstatus | default('')}}"
          proxmox_scsi0: "{{ proxmox_scsi0 | default('') }}"
          proxmox_scsi1: "{{ proxmox_scsi1 | default('') }}"
          proxmox_scsi2: "{{ proxmox_scsi2 | default('') }}"
          proxmox_scsi3: "{{ proxmox_scsi3 | default('') }}"
          proxmox_scsihw: "{{ proxmox_scsihw | default('') }}"
          proxmox_snapshots: "{{ proxmox_snapshots | default('') }}"
          proxmox_sockets: "{{ proxmox_sockets | default('') }}"
          proxmox_status: "{{ proxmox_status | default('') }}"
          proxmox_vmgenid: "{{ proxmox_vmgenid | default('') }}"
          proxmox_vmid: "{{ proxmox_vmid | default('') }}"
          proxmox_vmtype: "{{ proxmox_vmtype | default('') }}"
          ansible_facts: "{{ filtered_system_facts }}"
      delegate_to: localhost
      throttle: 1
